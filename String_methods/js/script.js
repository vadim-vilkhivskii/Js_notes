'use strict';

//?Внутренний формат для строк — всегда UTF-16, вне зависимости от кодировки страницы.

//? Спецсимволы
//?  \n	  Перевод строки
//?  \', \"	Кавычки
//?  \t	Знак табуляции

//? Длина строки str.lenght

// let str = `Hello`;
// получаем первый символ
// alert( str[0] ); // H


//! Строки неизменяемы


//* str.toLowerCase() и str.toUpperCase() меняют регистр символов и возвращают новую строку

//! Поиск подстроки

//* str.indexOf(substr, pos) substr - искомая подсрока, pos - ищет с заданой позиции сроки
//* возвращает позицию, на которой располагается совпадение, либо -1 при отсутствии совпадений.

//* Чтобы найти все вхождения подстроки, нужно запустить indexOf в цикле. 
//* Каждый раз, получив очередную позицию, начинаем новый поиск со следующей

// let str = 'Ослик Иа-Иа посмотрел на виадук';

let target = 'Иа'; // цель поиска

let pos = 0;
while (true) {
    let foundPos = str.indexOf(target, pos);
    if (foundPos == -1) break;

    alert(`Найдено тут: ${foundPos}`);
    pos = foundPos + 1; // продолжаем со следующей позиции
}

//*  str.lastIndexOf(substr, pos) - анологично но ищет с конца

//* str.includes(substr, pos) - так же ищет подстроку но возвращает true || false

//* Методы str.startsWith и str.endsWith проверяют, соответственно,
//* начинается ли и заканчивается ли строка определённой строкой:\

//! Получение подстроки
//? В JavaScript есть 3 метода для получения подстроки: substring, substr и slice

//* str.slice(start , end) - возвращает часть строки от start до (не включая) end.

// let str = "stringify";
// //* 'strin', символы от 0 до 5 (не включая 5)
// alert( str.slice(0, 5) );
//  's', от 0 до 1, не включая 1, т. е. только один символ на позиции 0
// alert( str.slice(0, 1) );
//* если аргумент end отсутствует, slice возвращает символы до конца строки

// let str = "stringify";
// alert( str.slice(2) ); // ringify, с позиции 2 и до конца

//* str.substring(start [, end]) - Возвращает часть строки между start и end (не включая) end
//*Если start больше end, то метод substring сработает так, как если бы аргументы были поменяны местами.

//* str.substr(start [, length]) возвращает часть строки от start длины length.
//* Значение первого аргумента может быть отрицательным, тогда позиция определяется с конца

//! Сравнение строк

//* строки сравниваются посимвольно в алфавитном порядке, однако 
//* 1. Строчные буквы больше заглавных:
alert( 'a' > 'Z' ); // true
//* 2. Буквы, имеющие диакритические знаки, идут «не по порядку»
alert( 'Österreich' > 'Zealand' ); // true


//! Получить символ по его коду и наоборот в UTF-16. 

//* str.codePointAt(pos) - возвращает код для символа, находящегося на позиции pos

//* String.fromCodePoint(code) - Создаёт символ по его коду code
alert( String.fromCodePoint(90) ); // Z

//* Также можно добавлять Юникодные символы по их кодам, используя \u с шестнадцатеричным кодом символа:
//* 90 — 5a в шестнадцатеричной системе счисления
alert( '\u005a' ); // Z

//! Дополнительно

//* str.trim() — убирает пробелы в начале и конце строки.
//* str.repeat(n) — повторяет строку n раз.

//! Итог

//* Есть три типа кавычек. Строки, использующие обратные кавычки, 
//* могут занимать более одной строки в коде и включать выражения ${…}.

//* Строки в JavaScript кодируются в UTF-16.

//* Есть специальные символы, такие как \n, и можно добавить символ по его Юникодному коду, 
//* используя \u….

//* Для получения символа используйте [].

//* Для получения подстроки используйте slice или substring.

//* Для того, чтобы перевести строку в нижний или верхний регистр, используйте toLowerCase/toUpperCase.

//* Для поиска подстроки используйте indexOf или includes/startsWith/endsWith, 
//* когда надо только проверить, есть ли вхождение.

//* Чтобы сравнить строки с учётом правил языка, используйте localeCompare.

function find_max(nums) {
    let max_num = Number.NEGATIVE_INFINITY; // smaller than all other numbers
    for (let num of nums) {
    if (num > max_num) {
    // (Fill in the missing line here)
    }
    }
    return max_num;
    }
    find_max();