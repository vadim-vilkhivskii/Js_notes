//! Set
//! Объект Set – это особый вид коллекции: «множество» значений (без ключей),
//! где каждое значение может появляться только один раз.

//! Его основные методы это:

//! new Set(iterable) – создаёт Set, и если в качестве аргумента был предоставлен итерируемый объект
//! (обычно это массив), то копирует его значения в новый Set.
//! set.add(value) – добавляет значение (если оно уже есть, то ничего не делает), возвращает тот же объект set.
//! set.delete(value) – удаляет значение, возвращает true, если value было в множестве на момент вызова,
//! иначе false.
//! set.has(value) – возвращает true, если значение присутствует в множестве, иначе false.
//! set.clear() – удаляет все имеющиеся значения.
//! set.size – возвращает количество элементов в множестве.


//! Set имеет те же встроенные методы, что и Map:

//! set.values() – возвращает перебираемый объект для значений,
//! set.keys() – то же самое, что и set.values(), присутствует для обратной совместимости с Map,
//! set.entries() – возвращает перебираемый объект для пар вида [значение, значение],
//! присутствует для обратной совместимости с Map.


const set = new Set([1,2,3,3,3,4,5,5,6])
console.log(set);

//* set.add(value) – добавляет значение (если оно уже есть, то ничего не делает), возвращает тот же объект set.
set.add(10).add(20).add(30).add(10)
console.log(set);

//* set.has(value) – возвращает true, если значение присутствует в множестве, иначе false.
console.log(set.has(30));

//* set.size – возвращает количество элементов в множестве.
console.log(set.size);

//* set.delete(value) – удаляет значение, возвращает true, если value было в множестве на момент вызова,
//* иначе false.
console.log(set.delete(1));


//* set.clear() – удаляет все имеющиеся значения.
console.log(set.clear());


//===========
//! пример использования 
//* функция возвращает только уникальные значения
function uniqValues(arr){
    return [...new Set(arr)]
}
console.log(uniqValues([1,1,2,4,4,4,4,4,5,6,6,6,7]));


